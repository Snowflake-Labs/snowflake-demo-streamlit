---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for Snowflake Streamlit Demo Repository

## Repository Overview
This repository contains a collection of Streamlit applications and demos showcasing various features and use cases for Streamlit in Snowflake. Each directory represents a standalone demo or tutorial with its own README, environment configuration, and Streamlit app.

## Project Structure Conventions
- Each demo/app is contained in its own directory
- Main application file is named `streamlit_app.py`
- Each demo includes:
  - `README.md` with setup instructions and description
  - `environment.yml` for Snowflake environment dependencies
  - `assets/` folder for screenshots and static files
  - `data/` folder for sample data and SQL creation scripts (when applicable)

## Technology Stack
- **Primary**: Python, Streamlit, Snowflake
- **Common Libraries**: pandas, plotly, altair, snowflake-connector-python
- **Visualization**: Plotly, Altair, H3 mapping
- **Data**: CSV files, SQL scripts, Snowflake tables

## File Naming Conventions
- Main app: `streamlit_app.py`
- Utilities: `utils.py`, `components.py`, `helpers.py`
- Data scripts: `creation_script.sql` (in data/ folders)
- Config files: `environment.yml`, `config.toml`, `snowflake.yml`
- Multi-page apps use `pages/` directory

## Coding Patterns and Best Practices
### Streamlit Structure
- Use `st.set_page_config()` at the top for page configuration
- Implement proper session state management
- Use `@st.cache_data` and `@st.cache_resource` for performance
- Follow Streamlit's column layout patterns: `col1, col2 = st.columns([1, 2])`

### Snowflake Integration
- Use Snowflake connection objects properly: `session = st.connection("snowflake")` or `session = get_active_session()`
- Use parameterized queries to prevent SQL injection
- Cache database connections and queries appropriately

### Code Organization
- Separate business logic into utility modules (`utils.py`, `components.py`)
- Keep data access patterns in dedicated modules (`data_access.py`)
- Use consistent import ordering: standard library, third-party, local imports
- Implement proper logging and error handling

### Environment Configuration
- Always include `environment.yml` for Snowflake dependencies
- Do not include `conda-forge` as a channel, and always pull from the `snowflake` channel
- Pin package versions when necessary for stability
- Do not pin the `streamlit` library
- Use Python 3.11 

## Documentation Standards
- Each app must have a comprehensive README.md
- Include screenshots in assets/ folder
- Provide clear setup and usage instructions
- Document any special configuration requirements
- Include data source information and setup scripts

## Security and Best Practices
- Never hardcode credentials or sensitive information
- Use Snowflake's secure connection methods
- Implement proper input validation and sanitization
- Follow principle of least privilege for database access
- Use environment variables for configuration

## Testing and Quality
- Test apps with sample data before deployment
- Ensure all dependencies are properly specified
- Validate that SQL scripts create necessary objects
- Check that all file paths are relative and portable
- Verify cross-platform compatibility

## Deployment Considerations
- Apps are designed to run in Snowflake's Streamlit environment
- Use `config.toml` for Snowflake-specific configurations
- Ensure all assets are properly referenced
- Test with appropriate Snowflake roles and permissions

## Common Libraries and Imports
```python
import streamlit as st
from snowflake.snowpark.context import get_active_session
```

## File Extensions and Types
- Python: `.py`
- Configuration: `.yml`, `.toml`
- Documentation: `.md`
- Data: `.csv`, `.sql`
- Images: `.png`, `.jpg`, `.jpeg`, `.gif`

## When making changes:
1. Maintain consistency with existing patterns in the repository
2. Update README files when adding new features
3. Include appropriate error handling and user feedback
4. Test with sample data when possible
5. Follow the established directory structure
6. Use semantic commit messages
7. Ensure all new dependencies are added to environment.yml 
